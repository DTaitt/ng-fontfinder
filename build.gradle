buildscript {
	ext {
		springBootVersion = '2.0.0.RELEASE'
	}
	repositories {
		mavenCentral()
		jcenter()

	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "com.avast.gradle:gradle-docker-compose-plugin:0.6.17"

	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'docker-compose'

dockerCompose {
	useComposeFiles = ['docker-compose.yml']
}

dockerCompose.isRequiredBy(test)


group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}



dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-netflix:1.4.0.RELEASE'
	}
}



dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile 'org.springframework.cloud:spring-cloud-starter-eureka'

	compileOnly 'org.projectlombok:lombok'

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile 'io.rest-assured:rest-assured:3.0.6'


	runtime 'org.postgresql:postgresql'
	runtime 'org.springframework.boot:spring-boot-devtools'

}

task waitForFavoritesAPI(type: Exec) {
	commandLine './wait-for-favorites-api.sh','http://localhost:8080/favorites', 'Favorites API'
}

task waitForSetsAPI(type: Exec) {
	commandLine './wait-for-sets-api.sh','http://localhost:8080/sets', 'Sets API'
}

task runFavoritesAPITests(type: Exec) {
	workingDir './favorites-api'
	commandLine './gradlew', 'test'
}

task runSetsAPITests(type: Exec) {
	workingDir './sets-api'
	commandLine './gradlew', 'test'
}

task allTests(type: Test) {
	dependsOn cleanTest
	dependsOn waitForFavoritesAPI
	dependsOn waitForSetsAPI
	dependsOn runFavoritesAPITests
	dependsOn runSetsAPITests

	testLogging {
		exceptionFormat "full"
		events "skipped", "passed", "failed"
		displayGranularity 2
	}
}

test {
	dependsOn cleanTest
	dependsOn waitForFavoritesAPI
	dependsOn waitForSetsAPI

	testLogging {
		exceptionFormat "full"
		events "skipped", "passed", "failed"
		displayGranularity 2
	}
}

dockerCompose.isRequiredBy(allTests)
